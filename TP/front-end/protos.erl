%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.0.2
-module(protos).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types

-export_type([]).

%% message types
-type 'OrderRequest'() ::
      #{%% type                 => iolist()         % = 1
        %% company_id           => iolist()         % = 2
        %% quantity             => integer()        % = 3, 32 bits
        %% price                => float() | integer() | infinity | '-infinity' | nan % = 4
       }.
-type 'Client'() ::
      #{%% user                 => iolist()         % = 1
        %% pass                 => iolist()         % = 2
       }.
-type 'Reply_Login'() ::
      #{%% valid                => boolean() | 0 | 1 % = 1
        %% msg                  => iolist()         % = 2
       }.
-type 'Request_Login'() ::
      #{%% msg                  => iolist()         % = 1
       }.
-type 'MsgCS'() ::
      #{%% company              => iolist()         % = 1
        %% type                 => iolist()         % = 2
        %% info                 => 'Client'()       % = 3
        %% reqL                 => 'Request_Login'() % = 4
        %% repL                 => 'Reply_Login'()  % = 5
        %% orderRequest         => 'OrderRequest'() % = 6
       }.
-export_type(['OrderRequest'/0, 'Client'/0, 'Reply_Login'/0, 'Request_Login'/0, 'MsgCS'/0]).

-spec encode_msg('OrderRequest'() | 'Client'() | 'Reply_Login'() | 'Request_Login'() | 'MsgCS'(),'OrderRequest' | 'Client' | 'Reply_Login' | 'Request_Login' | 'MsgCS') -> binary().
encode_msg(Msg, MsgName) ->
    encode_msg(Msg, MsgName, []).


-spec encode_msg('OrderRequest'() | 'Client'() | 'Reply_Login'() | 'Request_Login'() | 'MsgCS'(),'OrderRequest' | 'Client' | 'Reply_Login' | 'Request_Login' | 'MsgCS', list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'OrderRequest' -> e_msg_OrderRequest(Msg, TrUserData);
      'Client' -> e_msg_Client(Msg, TrUserData);
      'Reply_Login' -> e_msg_Reply_Login(Msg, TrUserData);
      'Request_Login' -> e_msg_Request_Login(Msg, TrUserData);
      'MsgCS' -> e_msg_MsgCS(Msg, TrUserData)
    end.



e_msg_OrderRequest(Msg, TrUserData) ->
    e_msg_OrderRequest(Msg, <<>>, TrUserData).


e_msg_OrderRequest(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{type := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 e_type_string(TrF1, <<Bin/binary, 10>>)
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{company_id := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 e_type_string(TrF2, <<B1/binary, 18>>)
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{quantity := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 e_type_int32(TrF3, <<B2/binary, 24>>)
	       end;
	   _ -> B2
	 end,
    case M of
      #{price := F4} ->
	  begin
	    TrF4 = id(F4, TrUserData),
	    e_type_float(TrF4, <<B3/binary, 37>>)
	  end;
      _ -> B3
    end.

e_msg_Client(Msg, TrUserData) ->
    e_msg_Client(Msg, <<>>, TrUserData).


e_msg_Client(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{user := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 e_type_string(TrF1, <<Bin/binary, 10>>)
	       end;
	   _ -> Bin
	 end,
    case M of
      #{pass := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    e_type_string(TrF2, <<B1/binary, 18>>)
	  end;
      _ -> B1
    end.

e_msg_Reply_Login(Msg, TrUserData) ->
    e_msg_Reply_Login(Msg, <<>>, TrUserData).


e_msg_Reply_Login(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{valid := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 e_type_bool(TrF1, <<Bin/binary, 8>>)
	       end;
	   _ -> Bin
	 end,
    case M of
      #{msg := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    e_type_string(TrF2, <<B1/binary, 18>>)
	  end;
      _ -> B1
    end.

e_msg_Request_Login(Msg, TrUserData) ->
    e_msg_Request_Login(Msg, <<>>, TrUserData).


e_msg_Request_Login(#{} = M, Bin, TrUserData) ->
    case M of
      #{msg := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    e_type_string(TrF1, <<Bin/binary, 10>>)
	  end;
      _ -> Bin
    end.

e_msg_MsgCS(Msg, TrUserData) ->
    e_msg_MsgCS(Msg, <<>>, TrUserData).


e_msg_MsgCS(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{company := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 e_type_string(TrF1, <<Bin/binary, 10>>)
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{type := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 e_type_string(TrF2, <<B1/binary, 18>>)
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{info := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 e_mfield_MsgCS_info(TrF3, <<B2/binary, 26>>, TrUserData)
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{reqL := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 e_mfield_MsgCS_reqL(TrF4, <<B3/binary, 34>>, TrUserData)
	       end;
	   _ -> B3
	 end,
    B5 = case M of
	   #{repL := F5} ->
	       begin
		 TrF5 = id(F5, TrUserData),
		 e_mfield_MsgCS_repL(TrF5, <<B4/binary, 42>>, TrUserData)
	       end;
	   _ -> B4
	 end,
    case M of
      #{orderRequest := F6} ->
	  begin
	    TrF6 = id(F6, TrUserData),
	    e_mfield_MsgCS_orderRequest(TrF6, <<B5/binary, 50>>,
					TrUserData)
	  end;
      _ -> B5
    end.

e_mfield_MsgCS_info(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Client(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_MsgCS_reqL(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Request_Login(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_MsgCS_repL(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Reply_Login(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_MsgCS_orderRequest(Msg, Bin, TrUserData) ->
    SubBin = e_msg_OrderRequest(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_bool(true, Bin) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin) -> <<Bin/binary, 0>>.

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_type_float(V, Bin) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin) ->
    <<Bin/binary, 0:16, 192, 127>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'OrderRequest' ->
	  try d_msg_OrderRequest(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'OrderRequest', {Class, Reason, StackTrace}}}})
	  end;
      'Client' ->
	  try d_msg_Client(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'Client', {Class, Reason, StackTrace}}}})
	  end;
      'Reply_Login' ->
	  try d_msg_Reply_Login(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'Reply_Login', {Class, Reason, StackTrace}}}})
	  end;
      'Request_Login' ->
	  try d_msg_Request_Login(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'Request_Login', {Class, Reason, StackTrace}}}})
	  end;
      'MsgCS' ->
	  try d_msg_MsgCS(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'MsgCS', {Class, Reason, StackTrace}}}})
	  end
    end.



d_msg_OrderRequest(Bin, TrUserData) ->
    dfp_read_field_def_OrderRequest(Bin, 0, 0,
				    id('$undef', TrUserData),
				    id('$undef', TrUserData),
				    id('$undef', TrUserData),
				    id('$undef', TrUserData), TrUserData).

dfp_read_field_def_OrderRequest(<<10, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_OrderRequest_type(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData);
dfp_read_field_def_OrderRequest(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_OrderRequest_company_id(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_OrderRequest(<<24, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_OrderRequest_quantity(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData);
dfp_read_field_def_OrderRequest(<<37, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_OrderRequest_price(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData);
dfp_read_field_def_OrderRequest(<<>>, 0, 0, F@_1, F@_2,
				F@_3, F@_4, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{type => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{company_id => F@_2}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{quantity => F@_3}
	 end,
    if F@_4 == '$undef' -> S4;
       true -> S4#{price => F@_4}
    end;
dfp_read_field_def_OrderRequest(Other, Z1, Z2, F@_1,
				F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_OrderRequest(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_OrderRequest(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_OrderRequest(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				   TrUserData);
dg_read_field_def_OrderRequest(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_OrderRequest_type(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, TrUserData);
      18 ->
	  d_field_OrderRequest_company_id(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, TrUserData);
      24 ->
	  d_field_OrderRequest_quantity(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, TrUserData);
      37 ->
	  d_field_OrderRequest_price(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_OrderRequest(Rest, 0, 0, F@_1, F@_2, F@_3,
					 F@_4, TrUserData);
	    1 ->
		skip_64_OrderRequest(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     TrUserData);
	    2 ->
		skip_length_delimited_OrderRequest(Rest, 0, 0, F@_1,
						   F@_2, F@_3, F@_4,
						   TrUserData);
	    3 ->
		skip_group_OrderRequest(Rest, Key bsr 3, 0, F@_1, F@_2,
					F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_OrderRequest(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     TrUserData)
	  end
    end;
dg_read_field_def_OrderRequest(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{type => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{company_id => F@_2}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{quantity => F@_3}
	 end,
    if F@_4 == '$undef' -> S4;
       true -> S4#{price => F@_4}
    end.

d_field_OrderRequest_type(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_OrderRequest_type(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_OrderRequest_type(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_OrderRequest(RestF, 0, 0, NewFValue,
				    F@_2, F@_3, F@_4, TrUserData).

d_field_OrderRequest_company_id(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_OrderRequest_company_id(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
d_field_OrderRequest_company_id(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_OrderRequest(RestF, 0, 0, F@_1,
				    NewFValue, F@_3, F@_4, TrUserData).

d_field_OrderRequest_quantity(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_OrderRequest_quantity(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
d_field_OrderRequest_quantity(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_OrderRequest(RestF, 0, 0, F@_1, F@_2,
				    NewFValue, F@_4, TrUserData).

d_field_OrderRequest_price(<<0:16, 128, 127,
			     Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) ->
    dfp_read_field_def_OrderRequest(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, infinity, TrUserData);
d_field_OrderRequest_price(<<0:16, 128, 255,
			     Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) ->
    dfp_read_field_def_OrderRequest(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, '-infinity', TrUserData);
d_field_OrderRequest_price(<<_:16, 1:1, _:7, _:1, 127:7,
			     Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) ->
    dfp_read_field_def_OrderRequest(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, nan, TrUserData);
d_field_OrderRequest_price(<<Value:32/little-float,
			     Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) ->
    dfp_read_field_def_OrderRequest(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, Value, TrUserData).

skip_varint_OrderRequest(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_OrderRequest(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, TrUserData);
skip_varint_OrderRequest(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_OrderRequest(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_OrderRequest(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_OrderRequest(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData);
skip_length_delimited_OrderRequest(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_OrderRequest(Rest2, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, TrUserData).

skip_group_OrderRequest(Bin, FNum, Z2, F@_1, F@_2, F@_3,
			F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_OrderRequest(Rest, 0, Z2, F@_1, F@_2,
				    F@_3, F@_4, TrUserData).

skip_32_OrderRequest(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_OrderRequest(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData).

skip_64_OrderRequest(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_OrderRequest(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData).

d_msg_Client(Bin, TrUserData) ->
    dfp_read_field_def_Client(Bin, 0, 0,
			      id('$undef', TrUserData),
			      id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Client(<<10, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_Client_user(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
dfp_read_field_def_Client(<<18, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_Client_pass(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
dfp_read_field_def_Client(<<>>, 0, 0, F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{user => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{pass => F@_2}
    end;
dfp_read_field_def_Client(Other, Z1, Z2, F@_1, F@_2,
			  TrUserData) ->
    dg_read_field_def_Client(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData).

dg_read_field_def_Client(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Client(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
dg_read_field_def_Client(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Client_user(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 ->
	  d_field_Client_pass(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Client(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_Client(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_Client(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    3 ->
		skip_group_Client(Rest, Key bsr 3, 0, F@_1, F@_2,
				  TrUserData);
	    5 -> skip_32_Client(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_Client(<<>>, 0, 0, F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{user => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{pass => F@_2}
    end.

d_field_Client_user(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Client_user(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, TrUserData);
d_field_Client_user(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_Client(RestF, 0, 0, NewFValue, F@_2,
			      TrUserData).

d_field_Client_pass(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Client_pass(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, TrUserData);
d_field_Client_pass(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_Client(RestF, 0, 0, F@_1, NewFValue,
			      TrUserData).

skip_varint_Client(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    skip_varint_Client(Rest, Z1, Z2, F@_1, F@_2,
		       TrUserData);
skip_varint_Client(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Client(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_length_delimited_Client(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Client(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
skip_length_delimited_Client(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Client(Rest2, 0, 0, F@_1, F@_2,
			      TrUserData).

skip_group_Client(Bin, FNum, Z2, F@_1, F@_2,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Client(Rest, 0, Z2, F@_1, F@_2,
			      TrUserData).

skip_32_Client(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_Client(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_64_Client(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_Client(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

d_msg_Reply_Login(Bin, TrUserData) ->
    dfp_read_field_def_Reply_Login(Bin, 0, 0,
				   id('$undef', TrUserData),
				   id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Reply_Login(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_Reply_Login_valid(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_Reply_Login(<<18, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_Reply_Login_msg(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_Reply_Login(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{valid => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{msg => F@_2}
    end;
dfp_read_field_def_Reply_Login(Other, Z1, Z2, F@_1,
			       F@_2, TrUserData) ->
    dg_read_field_def_Reply_Login(Other, Z1, Z2, F@_1, F@_2,
				  TrUserData).

dg_read_field_def_Reply_Login(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Reply_Login(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_Reply_Login(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Reply_Login_valid(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      18 ->
	  d_field_Reply_Login_msg(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Reply_Login(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    1 ->
		skip_64_Reply_Login(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_Reply_Login(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    3 ->
		skip_group_Reply_Login(Rest, Key bsr 3, 0, F@_1, F@_2,
				       TrUserData);
	    5 ->
		skip_32_Reply_Login(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_Reply_Login(<<>>, 0, 0, F@_1, F@_2,
			      _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{valid => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{msg => F@_2}
    end.

d_field_Reply_Login_valid(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Reply_Login_valid(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_Reply_Login_valid(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc =/= 0, Rest},
    dfp_read_field_def_Reply_Login(RestF, 0, 0, NewFValue,
				   F@_2, TrUserData).

d_field_Reply_Login_msg(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Reply_Login_msg(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_Reply_Login_msg(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_Reply_Login(RestF, 0, 0, F@_1,
				   NewFValue, TrUserData).

skip_varint_Reply_Login(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_Reply_Login(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
skip_varint_Reply_Login(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Reply_Login(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_length_delimited_Reply_Login(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Reply_Login(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_Reply_Login(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Reply_Login(Rest2, 0, 0, F@_1, F@_2,
				   TrUserData).

skip_group_Reply_Login(Bin, FNum, Z2, F@_1, F@_2,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Reply_Login(Rest, 0, Z2, F@_1, F@_2,
				   TrUserData).

skip_32_Reply_Login(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_Reply_Login(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_64_Reply_Login(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_Reply_Login(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

d_msg_Request_Login(Bin, TrUserData) ->
    dfp_read_field_def_Request_Login(Bin, 0, 0,
				     id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Request_Login(<<10, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    d_field_Request_Login_msg(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_Request_Login(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{msg => F@_1}
    end;
dfp_read_field_def_Request_Login(Other, Z1, Z2, F@_1,
				 TrUserData) ->
    dg_read_field_def_Request_Login(Other, Z1, Z2, F@_1,
				    TrUserData).

dg_read_field_def_Request_Login(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Request_Login(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_Request_Login(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Request_Login_msg(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Request_Login(Rest, 0, 0, F@_1, TrUserData);
	    1 ->
		skip_64_Request_Login(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_Request_Login(Rest, 0, 0, F@_1,
						    TrUserData);
	    3 ->
		skip_group_Request_Login(Rest, Key bsr 3, 0, F@_1,
					 TrUserData);
	    5 -> skip_32_Request_Login(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_Request_Login(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{msg => F@_1}
    end.

d_field_Request_Login_msg(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Request_Login_msg(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
d_field_Request_Login_msg(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_Request_Login(RestF, 0, 0, NewFValue,
				     TrUserData).

skip_varint_Request_Login(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    skip_varint_Request_Login(Rest, Z1, Z2, F@_1,
			      TrUserData);
skip_varint_Request_Login(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    dfp_read_field_def_Request_Login(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_length_delimited_Request_Login(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Request_Login(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_Request_Login(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Request_Login(Rest2, 0, 0, F@_1,
				     TrUserData).

skip_group_Request_Login(Bin, FNum, Z2, F@_1,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Request_Login(Rest, 0, Z2, F@_1,
				     TrUserData).

skip_32_Request_Login(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_Request_Login(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_64_Request_Login(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_Request_Login(Rest, Z1, Z2, F@_1,
				     TrUserData).

d_msg_MsgCS(Bin, TrUserData) ->
    dfp_read_field_def_MsgCS(Bin, 0, 0,
			     id('$undef', TrUserData), id('$undef', TrUserData),
			     id('$undef', TrUserData), id('$undef', TrUserData),
			     id('$undef', TrUserData), id('$undef', TrUserData),
			     TrUserData).

dfp_read_field_def_MsgCS(<<10, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_MsgCS_company(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_MsgCS(<<18, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_MsgCS_type(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, TrUserData);
dfp_read_field_def_MsgCS(<<26, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_MsgCS_info(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, TrUserData);
dfp_read_field_def_MsgCS(<<34, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_MsgCS_reqL(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, TrUserData);
dfp_read_field_def_MsgCS(<<42, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_MsgCS_repL(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, TrUserData);
dfp_read_field_def_MsgCS(<<50, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_MsgCS_orderRequest(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_MsgCS(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{company => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{type => F@_2}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{info => F@_3}
	 end,
    S5 = if F@_4 == '$undef' -> S4;
	    true -> S4#{reqL => F@_4}
	 end,
    S6 = if F@_5 == '$undef' -> S5;
	    true -> S5#{repL => F@_5}
	 end,
    if F@_6 == '$undef' -> S6;
       true -> S6#{orderRequest => F@_6}
    end;
dfp_read_field_def_MsgCS(Other, Z1, Z2, F@_1, F@_2,
			 F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dg_read_field_def_MsgCS(Other, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_MsgCS(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MsgCS(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dg_read_field_def_MsgCS(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_MsgCS_company(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, TrUserData);
      18 ->
	  d_field_MsgCS_type(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, F@_6, TrUserData);
      26 ->
	  d_field_MsgCS_info(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, F@_6, TrUserData);
      34 ->
	  d_field_MsgCS_reqL(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, F@_6, TrUserData);
      42 ->
	  d_field_MsgCS_repL(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, F@_6, TrUserData);
      50 ->
	  d_field_MsgCS_orderRequest(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_MsgCS(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				  F@_5, F@_6, TrUserData);
	    1 ->
		skip_64_MsgCS(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			      F@_6, TrUserData);
	    2 ->
		skip_length_delimited_MsgCS(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, F@_5, F@_6, TrUserData);
	    3 ->
		skip_group_MsgCS(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, TrUserData);
	    5 ->
		skip_32_MsgCS(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			      F@_6, TrUserData)
	  end
    end;
dg_read_field_def_MsgCS(<<>>, 0, 0, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{company => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{type => F@_2}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{info => F@_3}
	 end,
    S5 = if F@_4 == '$undef' -> S4;
	    true -> S4#{reqL => F@_4}
	 end,
    S6 = if F@_5 == '$undef' -> S5;
	    true -> S5#{repL => F@_5}
	 end,
    if F@_6 == '$undef' -> S6;
       true -> S6#{orderRequest => F@_6}
    end.

d_field_MsgCS_company(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_MsgCS_company(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_MsgCS_company(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_MsgCS(RestF, 0, 0, NewFValue, F@_2,
			     F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_MsgCS_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_MsgCS_type(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_MsgCS_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, _, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_MsgCS(RestF, 0, 0, F@_1, NewFValue,
			     F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_MsgCS_info(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_MsgCS_info(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_MsgCS_info(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, Prev, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_Client(Bs, TrUserData), TrUserData), Rest2}
			 end,
    dfp_read_field_def_MsgCS(RestF, 0, 0, F@_1, F@_2,
			     if Prev == '$undef' -> NewFValue;
				true ->
				    merge_msg_Client(Prev, NewFValue,
						     TrUserData)
			     end,
			     F@_4, F@_5, F@_6, TrUserData).

d_field_MsgCS_reqL(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_MsgCS_reqL(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_MsgCS_reqL(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, Prev, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_Request_Login(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_MsgCS(RestF, 0, 0, F@_1, F@_2, F@_3,
			     if Prev == '$undef' -> NewFValue;
				true ->
				    merge_msg_Request_Login(Prev, NewFValue,
							    TrUserData)
			     end,
			     F@_5, F@_6, TrUserData).

d_field_MsgCS_repL(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_MsgCS_repL(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_MsgCS_repL(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, Prev, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_Reply_Login(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_MsgCS(RestF, 0, 0, F@_1, F@_2, F@_3,
			     F@_4,
			     if Prev == '$undef' -> NewFValue;
				true ->
				    merge_msg_Reply_Login(Prev, NewFValue,
							  TrUserData)
			     end,
			     F@_6, TrUserData).

d_field_MsgCS_orderRequest(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_MsgCS_orderRequest(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_MsgCS_orderRequest(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, Prev,
			   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_OrderRequest(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_MsgCS(RestF, 0, 0, F@_1, F@_2, F@_3,
			     F@_4, F@_5,
			     if Prev == '$undef' -> NewFValue;
				true ->
				    merge_msg_OrderRequest(Prev, NewFValue,
							   TrUserData)
			     end,
			     TrUserData).

skip_varint_MsgCS(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    skip_varint_MsgCS(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		      F@_5, F@_6, TrUserData);
skip_varint_MsgCS(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_MsgCS(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_MsgCS(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			    TrUserData)
    when N < 57 ->
    skip_length_delimited_MsgCS(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_length_delimited_MsgCS(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MsgCS(Rest2, 0, 0, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, TrUserData).

skip_group_MsgCS(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		 F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MsgCS(Rest, 0, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, TrUserData).

skip_32_MsgCS(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_MsgCS(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, TrUserData).

skip_64_MsgCS(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_MsgCS(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'OrderRequest' ->
	  merge_msg_OrderRequest(Prev, New, TrUserData);
      'Client' -> merge_msg_Client(Prev, New, TrUserData);
      'Reply_Login' ->
	  merge_msg_Reply_Login(Prev, New, TrUserData);
      'Request_Login' ->
	  merge_msg_Request_Login(Prev, New, TrUserData);
      'MsgCS' -> merge_msg_MsgCS(Prev, New, TrUserData)
    end.

merge_msg_OrderRequest(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{type := NFtype}} -> S1#{type => NFtype};
	   {#{type := PFtype}, _} -> S1#{type => PFtype};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{company_id := NFcompany_id}} ->
	       S2#{company_id => NFcompany_id};
	   {#{company_id := PFcompany_id}, _} ->
	       S2#{company_id => PFcompany_id};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{quantity := NFquantity}} ->
	       S3#{quantity => NFquantity};
	   {#{quantity := PFquantity}, _} ->
	       S3#{quantity => PFquantity};
	   _ -> S3
	 end,
    case {PMsg, NMsg} of
      {_, #{price := NFprice}} -> S4#{price => NFprice};
      {#{price := PFprice}, _} -> S4#{price => PFprice};
      _ -> S4
    end.

merge_msg_Client(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{user := NFuser}} -> S1#{user => NFuser};
	   {#{user := PFuser}, _} -> S1#{user => PFuser};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{pass := NFpass}} -> S2#{pass => NFpass};
      {#{pass := PFpass}, _} -> S2#{pass => PFpass};
      _ -> S2
    end.

merge_msg_Reply_Login(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{valid := NFvalid}} -> S1#{valid => NFvalid};
	   {#{valid := PFvalid}, _} -> S1#{valid => PFvalid};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{msg := NFmsg}} -> S2#{msg => NFmsg};
      {#{msg := PFmsg}, _} -> S2#{msg => PFmsg};
      _ -> S2
    end.

merge_msg_Request_Login(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{msg := NFmsg}} -> S1#{msg => NFmsg};
      {#{msg := PFmsg}, _} -> S1#{msg => PFmsg};
      _ -> S1
    end.

merge_msg_MsgCS(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{company := NFcompany}} ->
	       S1#{company => NFcompany};
	   {#{company := PFcompany}, _} ->
	       S1#{company => PFcompany};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{type := NFtype}} -> S2#{type => NFtype};
	   {#{type := PFtype}, _} -> S2#{type => PFtype};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {#{info := PFinfo}, #{info := NFinfo}} ->
	       S3#{info =>
		       merge_msg_Client(PFinfo, NFinfo, TrUserData)};
	   {_, #{info := NFinfo}} -> S3#{info => NFinfo};
	   {#{info := PFinfo}, _} -> S3#{info => PFinfo};
	   {_, _} -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {#{reqL := PFreqL}, #{reqL := NFreqL}} ->
	       S4#{reqL =>
		       merge_msg_Request_Login(PFreqL, NFreqL, TrUserData)};
	   {_, #{reqL := NFreqL}} -> S4#{reqL => NFreqL};
	   {#{reqL := PFreqL}, _} -> S4#{reqL => PFreqL};
	   {_, _} -> S4
	 end,
    S6 = case {PMsg, NMsg} of
	   {#{repL := PFrepL}, #{repL := NFrepL}} ->
	       S5#{repL =>
		       merge_msg_Reply_Login(PFrepL, NFrepL, TrUserData)};
	   {_, #{repL := NFrepL}} -> S5#{repL => NFrepL};
	   {#{repL := PFrepL}, _} -> S5#{repL => PFrepL};
	   {_, _} -> S5
	 end,
    case {PMsg, NMsg} of
      {#{orderRequest := PForderRequest},
       #{orderRequest := NForderRequest}} ->
	  S6#{orderRequest =>
		  merge_msg_OrderRequest(PForderRequest, NForderRequest,
					 TrUserData)};
      {_, #{orderRequest := NForderRequest}} ->
	  S6#{orderRequest => NForderRequest};
      {#{orderRequest := PForderRequest}, _} ->
	  S6#{orderRequest => PForderRequest};
      {_, _} -> S6
    end.


verify_msg(Msg, MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'OrderRequest' ->
	  v_msg_OrderRequest(Msg, ['OrderRequest'], TrUserData);
      'Client' -> v_msg_Client(Msg, ['Client'], TrUserData);
      'Reply_Login' ->
	  v_msg_Reply_Login(Msg, ['Reply_Login'], TrUserData);
      'Request_Login' ->
	  v_msg_Request_Login(Msg, ['Request_Login'], TrUserData);
      'MsgCS' -> v_msg_MsgCS(Msg, ['MsgCS'], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_OrderRequest/3}).
v_msg_OrderRequest(#{} = M, Path, _) ->
    case M of
      #{type := F1} -> v_type_string(F1, [type | Path]);
      _ -> ok
    end,
    case M of
      #{company_id := F2} ->
	  v_type_string(F2, [company_id | Path]);
      _ -> ok
    end,
    case M of
      #{quantity := F3} ->
	  v_type_int32(F3, [quantity | Path]);
      _ -> ok
    end,
    case M of
      #{price := F4} -> v_type_float(F4, [price | Path]);
      _ -> ok
    end,
    lists:foreach(fun (type) -> ok;
		      (company_id) -> ok;
		      (quantity) -> ok;
		      (price) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_OrderRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'OrderRequest'},
		  M, Path);
v_msg_OrderRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'OrderRequest'}, X, Path).

-dialyzer({nowarn_function,v_msg_Client/3}).
v_msg_Client(#{} = M, Path, _) ->
    case M of
      #{user := F1} -> v_type_string(F1, [user | Path]);
      _ -> ok
    end,
    case M of
      #{pass := F2} -> v_type_string(F2, [pass | Path]);
      _ -> ok
    end,
    lists:foreach(fun (user) -> ok;
		      (pass) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Client(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'Client'},
		  M, Path);
v_msg_Client(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Client'}, X, Path).

-dialyzer({nowarn_function,v_msg_Reply_Login/3}).
v_msg_Reply_Login(#{} = M, Path, _) ->
    case M of
      #{valid := F1} -> v_type_bool(F1, [valid | Path]);
      _ -> ok
    end,
    case M of
      #{msg := F2} -> v_type_string(F2, [msg | Path]);
      _ -> ok
    end,
    lists:foreach(fun (valid) -> ok;
		      (msg) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Reply_Login(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'Reply_Login'},
		  M, Path);
v_msg_Reply_Login(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Reply_Login'}, X, Path).

-dialyzer({nowarn_function,v_msg_Request_Login/3}).
v_msg_Request_Login(#{} = M, Path, _) ->
    case M of
      #{msg := F1} -> v_type_string(F1, [msg | Path]);
      _ -> ok
    end,
    lists:foreach(fun (msg) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Request_Login(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'Request_Login'},
		  M, Path);
v_msg_Request_Login(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Request_Login'}, X, Path).

-dialyzer({nowarn_function,v_msg_MsgCS/3}).
v_msg_MsgCS(#{} = M, Path, TrUserData) ->
    case M of
      #{company := F1} -> v_type_string(F1, [company | Path]);
      _ -> ok
    end,
    case M of
      #{type := F2} -> v_type_string(F2, [type | Path]);
      _ -> ok
    end,
    case M of
      #{info := F3} ->
	  v_msg_Client(F3, [info | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{reqL := F4} ->
	  v_msg_Request_Login(F4, [reqL | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{repL := F5} ->
	  v_msg_Reply_Login(F5, [repL | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{orderRequest := F6} ->
	  v_msg_OrderRequest(F6, [orderRequest | Path],
			     TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (company) -> ok;
		      (type) -> ok;
		      (info) -> ok;
		      (reqL) -> ok;
		      (repL) -> ok;
		      (orderRequest) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_MsgCS(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'MsgCS'},
		  M, Path);
v_msg_MsgCS(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MsgCS'}, X, Path).

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_bool/2}).
v_type_bool(false, _Path) -> ok;
v_type_bool(true, _Path) -> ok;
v_type_bool(0, _Path) -> ok;
v_type_bool(1, _Path) -> ok;
v_type_bool(X, Path) ->
    mk_type_error(bad_boolean_value, X, Path).

-dialyzer({nowarn_function,v_type_float/2}).
v_type_float(N, _Path) when is_float(N) -> ok;
v_type_float(N, _Path) when is_integer(N) -> ok;
v_type_float(infinity, _Path) -> ok;
v_type_float('-infinity', _Path) -> ok;
v_type_float(nan, _Path) -> ok;
v_type_float(X, Path) ->
    mk_type_error(bad_float_value, X, Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).


-compile({inline,id/2}).
id(X, _TrUserData) -> X.


get_msg_defs() ->
    [{{msg, 'OrderRequest'},
      [#{name => type, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => company_id, fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []},
       #{name => quantity, fnum => 3, rnum => 4, type => int32,
	 occurrence => optional, opts => []},
       #{name => price, fnum => 4, rnum => 5, type => float,
	 occurrence => optional, opts => []}]},
     {{msg, 'Client'},
      [#{name => user, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => pass, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, 'Reply_Login'},
      [#{name => valid, fnum => 1, rnum => 2, type => bool,
	 occurrence => optional, opts => []},
       #{name => msg, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, 'Request_Login'},
      [#{name => msg, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, 'MsgCS'},
      [#{name => company, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => type, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []},
       #{name => info, fnum => 3, rnum => 4,
	 type => {msg, 'Client'}, occurrence => optional,
	 opts => []},
       #{name => reqL, fnum => 4, rnum => 5,
	 type => {msg, 'Request_Login'}, occurrence => optional,
	 opts => []},
       #{name => repL, fnum => 5, rnum => 6,
	 type => {msg, 'Reply_Login'}, occurrence => optional,
	 opts => []},
       #{name => orderRequest, fnum => 6, rnum => 7,
	 type => {msg, 'OrderRequest'}, occurrence => optional,
	 opts => []}]}].


get_msg_names() ->
    ['OrderRequest', 'Client', 'Reply_Login',
     'Request_Login', 'MsgCS'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['OrderRequest', 'Client', 'Reply_Login',
     'Request_Login', 'MsgCS'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('OrderRequest') ->
    [#{name => type, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => company_id, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []},
     #{name => quantity, fnum => 3, rnum => 4, type => int32,
       occurrence => optional, opts => []},
     #{name => price, fnum => 4, rnum => 5, type => float,
       occurrence => optional, opts => []}];
find_msg_def('Client') ->
    [#{name => user, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => pass, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def('Reply_Login') ->
    [#{name => valid, fnum => 1, rnum => 2, type => bool,
       occurrence => optional, opts => []},
     #{name => msg, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def('Request_Login') ->
    [#{name => msg, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []}];
find_msg_def('MsgCS') ->
    [#{name => company, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => type, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []},
     #{name => info, fnum => 3, rnum => 4,
       type => {msg, 'Client'}, occurrence => optional,
       opts => []},
     #{name => reqL, fnum => 4, rnum => 5,
       type => {msg, 'Request_Login'}, occurrence => optional,
       opts => []},
     #{name => repL, fnum => 5, rnum => 6,
       type => {msg, 'Reply_Login'}, occurrence => optional,
       opts => []},
     #{name => orderRequest, fnum => 6, rnum => 7,
       type => {msg, 'OrderRequest'}, occurrence => optional,
       opts => []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> client.



gpb_version_as_string() ->
    "4.0.2".

gpb_version_as_list() ->
    [4,0,2].
